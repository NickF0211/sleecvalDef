{
    "name": "GDPR",
    "relations": [
        {
            "Relationship": {
                "event1": "UserWantsToCook",
                "event2": "BeforeCookingBegins",
                "justification": "If the user wants to cook, naturally it means before cooking has begun",
                "witness": true
            }
        },
        {
            "Relationship": {
                "event1": "InformUser",
                "event2": "AskForDetailLevelOfInstructions",
                "justification": "When informing the user, asking for the detail level of instructions may be a part of the process",
                "witness": true
            }
        },
        {
            "Relationship": {
                "event1": "MeetingUser",
                "event2": "AskForEmergencyContact",
                "justification": "When first meeting the user, agent should ask for emergency contact, a safety measure",
                "witness": true
            }
        },
        {
            "Relationship": {
                "event1": "FireSafetyMeasures",
                "event2": "CheckTemperature",
                "justification": "Checking temperature could be part of the fire safety measures",
                "witness": true
            }
        },
        {
            "Relationship": {
                "event1": "SmokeDetectorAlarm",
                "event2": "CallEmergencyServices",
                "justification": "If the smoke detector alarm goes off, it's highly likely the emergency services would be called",
                "witness": true
            }
        },
        {
            "Relationship": {
                "event1": "OpenWindows",
                "event2": "FireSafetyMeasures",
                "justification": "Opening windows could be part of the fire safety measures",
                "witness": true
            }
        },
        {
            "Relationship": {
                "event1": "AllowUserToCook",
                "event2": "FoodPreparation",
                "justification": "If user is allowed to cook, the food preparation process starts",
                "witness": true
            }
        },
        {
            "Relationship": {
                "event1": "MonitorMealTime",
                "event2": "TrackTime",
                "justification": "To monitor meal time, tracking time is necessary",
                "witness": true
            }
        },
        {
            "Relationship": {
                "event1": "GivingCookingInstructions",
                "event2": "UseFirstPersonPluralLanguage",
                "justification": "Using first person plural language could be a mode of giving cooking instructions",
                "witness": true
            }
        },
        {
            "Relationship": {
                "event1": "UserChangeMind",
                "event2": "RecalculateApproach",
                "justification": "If user changes their mind, approach needs to recalculated accordingly",
                "witness": true
            }
        },
        {
            "Relationship": {
                "event1": "MeetingUser",
                "event2": "CallEmergencyServices",
                "justification": "While meeting the user, there shouldn't be a need to call emergency services. These events don't usually occur simultaneously.",
                "conflicts": true
            }
        },
        {
            "Relationship": {
                "event1": "AskUserIfOK",
                "event2": "CallEmergencyServices",
                "justification": "If asking the user if they're okay, it implies that emergency services shouldn't be called at this point.",
                "conflicts": true
            }
        },
        {
            "Relationship": {
                "event1": "MonitorMealTime",
                "event2": "HumanOnFloor",
                "justification": "While monitoring meal time, there shouldn't be a case of a human on floor. These two events are unlikely to occur together.",
                "conflicts": true
            }
        },
        {
            "Relationship": {
                "event1": "AllowUserToCook",
                "event2": "SmokeDetectorAlarm",
                "justification": "If smoke detector goes on, it implies something has gone wrong with cooking process. The user shouldn't be allowed to cook in such a case.",
                "conflicts": true
            }
        },
        {
            "Relationship": {
                "event1": "FoodPreparation",
                "event2": "SmokeDetectorAlarm",
                "justification": "While food is being prepared, a smoke detector going off is sign of a problem, these events are conflicting.",
                "conflicts": true
            }
        },
        {
            "Relationship": {
                "event1": "AskForEmergencyContact",
                "event2": "CallEmergencyServices",
                "justification": "If you are asking for emergency contact, it means you shouldn't be calling the emergency services at same time.",
                "conflicts": true
            }
        },
        {
            "Relationship": {
                "event1": "BeforeCookingBegins",
                "event2": "GivingCookingInstructions",
                "justification": "Cooking instructions are usually given during the cooking process, not before it begins.",
                "conflicts": true
            }
        },
        {
            "Relationship": {
                "event1": "UserUnpredictable",
                "event2": "InformCaregiver",
                "justification": "If the user is unpredictable, informing the caregiver might not be the best course of action at that exact moment.",
                "conflicts": true
            }
        },
        {
            "Relationship": {
                "event1": "PreparingDeployment",
                "event2": "AgentDeployed",
                "justification": "Preparing for deployment and the agent being deployed cannot happen at the same moment.",
                "conflicts": true
            }
        },
        {
            "Relationship": {
                "event1": "GivingCookingInstructions",
                "event2": "InformUser",
                "justification": "If the assistant is preoccupied with giving cooking instructions, it cannot inform user about other aspects at same time.",
                "conflicts": true
            }
        },
        {
            "Relationship": {
                "event1": "PreparingDeployment",
                "event2": "AgentDeployed",
                "justification": "Preparing Deployment must happen before the agent is deployed",
                "HB": true
            }
        },
        {
            "Relationship": {
                "event1": "FireSafetyMeasures",
                "event2": "SmokeDetectorAlarm",
                "justification": "Fire safety measures should be in place before any smoke detector alarm starts",
                "HB": true
            }
        },
        {
            "Relationship": {
                "event1": "AskForEmergencyContact",
                "event2": "CallEmergencyServices",
                "justification": "Emergency contact should be asked before any call the emergency services happens",
                "HB": true
            }
        },
        {
            "Relationship": {
                "event1": "MeetingUser",
                "event2": "InformUser",
                "justification": "The assistant should meet the user before informing them about anything",
                "HB": true
            }
        },
        {
            "Relationship": {
                "event1": "MeetingUser",
                "event2": "AskForDetailLevelOfInstructions",
                "justification": "The assistant should meet the user before asking for their preferred level of instruction detail",
                "HB": true
            }
        },
        {
            "Relationship": {
                "event1": "UserWantsToCook",
                "event2": "GivingCookingInstructions",
                "justification": "The user's desire to cook should occur before the assistant starts giving cooking instructions",
                "HB": true
            }
        },
        {
            "Relationship": {
                "event1": "UserWantsToCook",
                "event2": "AllowUserToCook",
                "justification": "The user's desire to cook should be identified before allowing them to cook",
                "HB": true
            }
        },
        {
            "Relationship": {
                "event1": "UserWantsToCook",
                "event2": "FoodPreparation",
                "justification": "The user's desire to cook should be identified before the food preparation starts",
                "HB": true
            }
        },
        {
            "Relationship": {
                "event1": "PrepareFood",
                "event2": "MonitorMealTime",
                "justification": "Food preparation should be started before meal time can be monitored",
                "HB": true
            }
        },
        {
            "Relationship": {
                "event1": "CollectandRecordInformation",
                "event2": "ProvideDataSummaries",
                "justification": "Data should be collected and recorded before data summaries can be provided",
                "HB": true
            }
        },
        {
            "Relationship": {
                "measure1": "userDisablesAlarm",
                "measure2": "alarmOn",
                "justification": "If the user disables the alarm, it implies that the alarm was on before",
                "implies": true
            }
        },
        {
            "Relationship": {
                "measure1": "userAsksForAppropriateTasks",
                "measure2": "userOccupied",
                "justification": "If the user is asking for appropriate tasks, it likely implies they are not currently occupied",
                "implies": true
            }
        },
        {
            "Relationship": {
                "measure1": "userNeedsSpecialAccomodations",
                "measure2": "personAuthorized",
                "justification": "If the user needs special accommodations, it's likely that a person authorized to make those accommodations is involved",
                "implies": true
            }
        },
        {
            "Relationship": {
                "measure1": "hazardDetected",
                "measure2": "kitchenSafe",
                "justification": "A detected hazard would usually imply that the kitchen is not safe",
                "implies": true
            }
        },
        {
            "Relationship": {
                "measure1": "alarmRestarts",
                "measure2": "alarmOn",
                "justification": "If the alarm restarts, it signifies that the alarm is on",
                "implies": true
            }
        },
        {
            "Relationship": {
                "measure1": "humanAssents",
                "measure2": "personAuthorized",
                "justification": "If a human assents, it would imply that a person authorized gave their approval",
                "implies": true
            }
        },
        {
            "Relationship": {
                "measure1": "safePathFound",
                "measure2": "hazardDetected",
                "justification": "If a safe path is found, it implies there were hazards that had to be avoided",
                "implies": true
            }
        },
        {
            "Relationship": {
                "measure1": "dataNeedsChecking",
                "measure2": "personAuthorized",
                "justification": "If data needs checking, it would imply that a person authorized is involved to ensure accuracy",
                "implies": true
            }
        },
        {
            "Relationship": {
                "measure1": "riskLevel",
                "measure2": "kitchenSafe",
                "justification": "If the risk level is high, it implies that the kitchen is not safe",
                "implies": true
            }
        },
        {
            "Relationship": {
                "measure1": "timeBetweenMeals",
                "measure2": "userOccupied",
                "justification": "Long time between meals might imply that the user is occupied with other tasks",
                "implies": true
            }
        },
        {
            "Relationship": {
                "measure1": "userDisablesAlarm",
                "measure2": "alarmOn",
                "justification": "If the user disables the alarm, it cannot be on",
                "ME": true
            }
        },
        {
            "Relationship": {
                "measure1": "userAsksForAppropriateTasks",
                "measure2": "userOccupied",
                "justification": "If the user is asking for appropriate tasks, they cannot be occupied",
                "ME": true
            }
        },
        {
            "Relationship": {
                "measure1": "personAuthorized",
                "measure2": "userNeedsSpecialAccomodations",
                "justification": "If a person is authorized, it doesn't mean the user needs special accommodations, these two measures don't necessarily coincide",
                "ME": true
            }
        },
        {
            "Relationship": {
                "measure1": "hazardDetected",
                "measure2": "kitchenSafe",
                "justification": "If a hazard is detected, the kitchen cannot be considered safe",
                "ME": true
            }
        },
        {
            "Relationship": {
                "measure1": "alarmRestarts",
                "measure2": "userDisablesAlarm",
                "justification": "If the alarm restarts, it cannot be that the user has disabled the alarm",
                "ME": true
            }
        },
        {
            "Relationship": {
                "measure1": "humanAssents",
                "measure2": "userUnpredictable",
                "justification": "If a human assents, the user cannot be unpredictable at the same time",
                "ME": true
            }
        },
        {
            "Relationship": {
                "measure1": "safePathFound",
                "measure2": "hazardDetected",
                "justification": "If a safe path is found, it means a hazard was not detected at the same time",
                "ME": true
            }
        },
        {
            "Relationship": {
                "measure1": "dataNeedsChecking",
                "measure2": "personAuthorized",
                "justification": "If the data needs checking, it doesn't mean that the person authorized to check it is available",
                "ME": true
            }
        },
        {
            "Relationship": {
                "measure1": "riskLevel",
                "measure2": "kitchenSafe",
                "justification": "If the risk level is high, the kitchen cannot be considered safe",
                "ME": true
            }
        },
        {
            "Relationship": {
                "measure1": "timeBetweenMeals",
                "measure2": "userOccupied",
                "justification": "A long time between meals doesn't necessarily mean that the user is occupied",
                "ME": true
            }
        },
        {
            "Relationship": {
                "measure1": "needLevel",
                "measure2": "riskLevel",
                "justification": "The level of needs can be directly proportional to the level of risk but in a different context. This might hold true in some contexts but not all, thus information given is not sufficient to establish equality",
                "equals": false
            }
        },
        {
            "Relationship": {
                "measure1": "personAuthorized",
                "measure2": "humanAssents",
                "justification": "A person being authorized does not guarantee that a human assents and vice versa. These are different concerns.",
                "equals": false
            }
        },
        {
            "Relationship": {
                "measure1": "alarmOn",
                "measure2": "userDisablesAlarm",
                "justification": "Alarm being on and user disabling the alarm are two separate occurrences and don't exactly represent the same measure.",
                "equals": false
            }
        },
        {
            "Relationship": {
                "measure1": "userOccupied",
                "measure2": "userAsksForAppropriateTasks",
                "justification": "A user being occupied and asking for appropriate tasks represent different circumstances and measures.",
                "equals": false
            }
        },
        {
            "Relationship": {
                "measure1": "dataNeedsChecking",
                "measure2": "personAuthorized",
                "justification": "Data needing checking and person being authorized are two separate measures. They don't represent the same.",
                "equals": false
            }
        }
    ]
}